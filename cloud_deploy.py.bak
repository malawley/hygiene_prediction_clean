#!/usr/bin/env python3

"""
cloud_deploy.py

Unified deployment script for all Cloud Run services in the hygiene prediction pipeline.
This script ensures correct deployment order, service image pushing, and inter-service configuration.

Key features:
1. Tags and pushes Docker images to Artifact Registry for all services.
2. Deploys the `trigger` service first to establish its Cloud Run URL.
3. Deploys all other microservices (`extractor`, `cleaner`, `loader-json`, `loader-parquet`)
   with the correct TRIGGER_URL pointing to the trigger's /clean endpoint.
4. After all services are deployed, fetches current Cloud Run URLs and builds a
   base64-encoded SERVICE_CONFIG_B64 containing those service endpoints.
5. Re-deploys `trigger` with the SERVICE_CONFIG_B64 + HTTP_MODE=true, enabling it to orchestrate the pipeline.

After successful execution:
- `trigger` has `SERVICE_CONFIG_B64` with the URLs of all services.
- All other services have `TRIGGER_URL` pointing to the trigger.
- The pipeline is fully connected and ready to be triggered via HTTP.

Usage examples:
    # Full deploy with routing
    $ python3 cloud_deploy.py

    # Dry run preview
    $ python3 cloud_deploy.py --dry-run

    # Deploy only the cleaner
    $ python3 cloud_deploy.py --only cleaner

Options:
    --only      Deploy only a single service (e.g., "cleaner")
    --dry-run   Print commands without executing
"""

import subprocess
import json
import base64
import argparse
import os

# Auto-encode services.json if not already set
if "SERVICE_CONFIG_B64" not in os.environ:
    with open("src/configure/services.json", "rb") as f:
        encoded = base64.b64encode(f.read()).decode("utf-8")
        os.environ["SERVICE_CONFIG_B64"] = encoded
        print("üîê Loaded SERVICE_CONFIG_B64 from src/configure/services.json")

ALL_SERVICES = [
    "extractor",
    "cleaner",
    "loader-json",
    "loader-parquet",
    "trigger",
    "eda-dashboard"
]

REGISTRY = "us-central1-docker.pkg.dev/hygiene-prediction/containers"

def run(cmd, desc, dry_run=False):
    print(f"\nüîß {desc}...")
    print(f"üîç Command: {cmd}")
    if dry_run:
        print("üí° Dry-run mode: not executing.")
        return
    result = subprocess.run(cmd, shell=True)
    if result.returncode != 0:
        print(f"‚ùå Failed: {desc}")
        exit(result.returncode)

def get_service_url(name):
    cmd = [
        "gcloud", "run", "services", "describe", name,
        "--platform=managed", "--region=us-central1",
        "--format=value(status.url)"
    ]
    return subprocess.check_output(cmd).decode().strip()

def deploy_service(service, env_vars, dry_run=False):
    remote_tag = f"{REGISTRY}/{service}"
    run(
        f"gcloud run deploy {service} "
        f"--image={remote_tag} "
        f"--platform=managed "
        f"--region=us-central1 "
        f"--allow-unauthenticated "
        f"--memory=1Gi "
        f"--timeout=600 "
        f"--set-env-vars={env_vars}",
        f"Deploying {service} to Cloud Run",
        dry_run
    )

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--dry-run", action="store_true", help="Preview all commands without executing")
    parser.add_argument("--only", help="Deploy only a specific service (e.g., 'cleaner')")
    args = parser.parse_args()

    dry_run = args.dry_run
    only_service = args.only

    print("üöÄ Starting cloud_deploy.py")

    if only_service:
        # Single-service mode
        local_tag = f"hygiene_prediction-{only_service}"
        remote_tag = f"{REGISTRY}/{only_service}"

        run(f"docker tag {local_tag} {remote_tag}", f"Tagging {only_service}", dry_run)
        run(f"gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://{REGISTRY.split('/')[0]}", "Authenticating Docker", dry_run)
        run(f"docker push {remote_tag}", f"Pushing {only_service}", dry_run)

        if only_service == "trigger":
            # Full config needed
            urls = {
                "extractor": get_service_url("extractor") + "/extract",
                "cleaner": get_service_url("cleaner") + "/clean",
                "loader": get_service_url("loader-json") + "/load",
                "loader_parquet": get_service_url("loader-parquet") + "/load",
                "trigger": get_service_url("trigger") + "/clean"
            }
            config_b64 = base64.b64encode(json.dumps({k: {"url": v} for k, v in urls.items()}).encode()).decode()
            env_vars = f"SERVICE_CONFIG_B64={config_b64},HTTP_MODE=true"
        else:
            trigger_url = get_service_url("trigger")
            env_vars = f"HTTP_MODE=true,TRIGGER_URL={trigger_url}/clean"

        deploy_service(only_service, env_vars, dry_run)
        return

    # === Phase 1: Push all services
    for service in ALL_SERVICES:
        local_tag = f"hygiene_prediction-{service}"
        remote_tag = f"{REGISTRY}/{service}"

        run(f"docker tag {local_tag} {remote_tag}", f"Tagging {service}", dry_run)
        run(f"gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://{REGISTRY.split('/')[0]}", "Authenticating Docker", dry_run)
        run(f"docker push {remote_tag}", f"Pushing {service}", dry_run)

    # === Phase 2: Deploy all non-trigger services
    trigger_url = get_service_url("trigger")
    for service in ALL_SERVICES:
        if service in ["trigger", "eda-dashboard"]:
            continue
        env_vars = f"HTTP_MODE=true,TRIGGER_URL={trigger_url}/clean"
        deploy_service(service, env_vars, dry_run)

    # === Phase 3: Build and inject SERVICE_CONFIG_B64 into trigger
    print("\nüì° Building SERVICE_CONFIG_B64 for trigger...")
    urls = {
        "extractor": get_service_url("extractor") + "/extract",
        "cleaner": get_service_url("cleaner") + "/clean",
        "loader": get_service_url("loader-json") + "/load",
        "loader_parquet": get_service_url("loader-parquet") + "/load",
        "trigger": get_service_url("trigger") + "/clean"
    }
    config_json = json.dumps({k: {"url": v} for k, v in urls.items()})
    config_b64 = base64.b64encode(config_json.encode()).decode()
    env_vars = f"SERVICE_CONFIG_B64={config_b64},HTTP_MODE=true"
    deploy_service("trigger", env_vars, dry_run)

    print("\n‚úÖ All services deployed with full routing configuration.")

if __name__ == "__main__":
    main()
